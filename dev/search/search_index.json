{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Developer Documentation \u00b6 The developer documentation contains three main parts. The general information tab explains our used terminology and there you can find our SDK. The examples tab offers a collection of examples that you might have use for. The API documentation tab redirects you streight to the plain API documentation. I you are missing documentation to a functionallity or the description is not clear you can open a ticket in our issue tracker and let us know.","title":"Developer Documentation"},{"location":"#developer-documentation","text":"The developer documentation contains three main parts. The general information tab explains our used terminology and there you can find our SDK. The examples tab offers a collection of examples that you might have use for. The API documentation tab redirects you streight to the plain API documentation. I you are missing documentation to a functionallity or the description is not clear you can open a ticket in our issue tracker and let us know.","title":"Developer Documentation"},{"location":"about/","text":"About \u00b6","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"api/","text":"Select an API in the menu to get redirected to the API documentation.","title":"API Documentation"},{"location":"examples/","text":"A collection of examples on how to interact with our API.","title":"Examples"},{"location":"examples/app-store-sdk/","text":"Maranics.AppStore.SDK \u00b6 This SDK offers methods to communicate with the app store and validate API requests. Demo | Documentation | Nuget Feed | Git Repository Initialization \u00b6 Authorization result will be stored in DI container in AccessTokenData object. You can use it in any service via dependency injection. using Maranics.AppStore.SDK; public IConfiguration Configuration { get; } public Startup(IConfiguration configuration) { Configuration = configuration; } public void ConfigureServices(IServiceCollection services) { services.ConfigureAppStore(Configuration); } public void Configure(IApplicationBuilder app) { app.UseAppStore(); } Note: AppSettings.json requires the following section for the auto configuration. Alternatively you can use ConfigureAppStore(..) overloads. \"AppStoreSettings\": { \"ClientId\": \"key\", \"ClientSecret\": \"secretKey\", \"AppStoreUrl\": \"url\" } Validate incoming API calls \u00b6 The example uses a custom Environment attribute inherited from TypeFilterAttribute and implements the OnAuthorization method. using Maranics.AppStore.SDK.Models; using Maranics.AppStore.SDK.Services; public void OnAuthorization(AuthorizationFilterContext context) { HttpRequest request = context.HttpContext.Request; var service = context.HttpContext.RequestServices.GetService(typeof(IAccessValidationService)) as IAccessValidationService; string token = request.Headers[\"Authorization\"]; string tenant = request.Headers[\"Tenant\"]; string ipAddress = request.HttpContext.Connection.RemoteIpAddress?.MapToIPv4().ToString() ValidationResponse response = service.ValidateAccess(token, tenant, ipAddress); if (validationResult.HasAccess) { ... } else { context.Result = new ObjectResult(validationResult.Error) { StatusCode = 401 }; } } Validation response: { \"HasAccess\": \"false\", \"Error\": \"error description\", \"ApplicationData\": { \"CompanyName\": \"\", \"Name\": \"\" }, \"Permissions\": [ \"GUID\", \"GUID\" ], } Get allowed tenants list \u00b6 As an example we use a service that is added to the DI container at startup. using Maranics.AppStore.SDK.Models; using Maranics.AppStore.SDK.Services; public class MyCustomService : IMyCustomService { private IConnectivityService _service; private AccessTokenData _tokenData; public MyCustomService(IConnectivityService service, AccessTokenData tokenData) { _service = service; _tokenData = tokenData; } public async Task<List<TenantAccess>> GetAllowedTenantList() { var response = await _service.GetAllowedTenants(_tokenData.Token); if (response != null && response.HasError == false) return response.Data; return new List<TenantAccess>(); } }","title":"App Store SDK"},{"location":"examples/app-store-sdk/#maranicsappstoresdk","text":"This SDK offers methods to communicate with the app store and validate API requests. Demo | Documentation | Nuget Feed | Git Repository","title":"Maranics.AppStore.SDK"},{"location":"examples/app-store-sdk/#initialization","text":"Authorization result will be stored in DI container in AccessTokenData object. You can use it in any service via dependency injection. using Maranics.AppStore.SDK; public IConfiguration Configuration { get; } public Startup(IConfiguration configuration) { Configuration = configuration; } public void ConfigureServices(IServiceCollection services) { services.ConfigureAppStore(Configuration); } public void Configure(IApplicationBuilder app) { app.UseAppStore(); } Note: AppSettings.json requires the following section for the auto configuration. Alternatively you can use ConfigureAppStore(..) overloads. \"AppStoreSettings\": { \"ClientId\": \"key\", \"ClientSecret\": \"secretKey\", \"AppStoreUrl\": \"url\" }","title":"Initialization"},{"location":"examples/app-store-sdk/#validate-incoming-api-calls","text":"The example uses a custom Environment attribute inherited from TypeFilterAttribute and implements the OnAuthorization method. using Maranics.AppStore.SDK.Models; using Maranics.AppStore.SDK.Services; public void OnAuthorization(AuthorizationFilterContext context) { HttpRequest request = context.HttpContext.Request; var service = context.HttpContext.RequestServices.GetService(typeof(IAccessValidationService)) as IAccessValidationService; string token = request.Headers[\"Authorization\"]; string tenant = request.Headers[\"Tenant\"]; string ipAddress = request.HttpContext.Connection.RemoteIpAddress?.MapToIPv4().ToString() ValidationResponse response = service.ValidateAccess(token, tenant, ipAddress); if (validationResult.HasAccess) { ... } else { context.Result = new ObjectResult(validationResult.Error) { StatusCode = 401 }; } } Validation response: { \"HasAccess\": \"false\", \"Error\": \"error description\", \"ApplicationData\": { \"CompanyName\": \"\", \"Name\": \"\" }, \"Permissions\": [ \"GUID\", \"GUID\" ], }","title":"Validate incoming API calls"},{"location":"examples/app-store-sdk/#get-allowed-tenants-list","text":"As an example we use a service that is added to the DI container at startup. using Maranics.AppStore.SDK.Models; using Maranics.AppStore.SDK.Services; public class MyCustomService : IMyCustomService { private IConnectivityService _service; private AccessTokenData _tokenData; public MyCustomService(IConnectivityService service, AccessTokenData tokenData) { _service = service; _tokenData = tokenData; } public async Task<List<TenantAccess>> GetAllowedTenantList() { var response = await _service.GetAllowedTenants(_tokenData.Token); if (response != null && response.HasError == false) return response.Data; return new List<TenantAccess>(); } }","title":"Get allowed tenants list"},{"location":"examples/authentication/","text":"","title":"Authentication"},{"location":"examples/event-sync-sdk/","text":"Maranics.EventSyncService.SDK. \u00b6 Maranics.EventSyncService.SDK is a general purpose Event Sync Service client for .NET. SDK has netstandard2.1 target. The client is developed by (and used-by) Maranics. This SDK offers methods to send and receive events from edge/cloud to cloud/edge instances. Demo | Documentation | Nuget Feed | Git Repository Installation \u00b6 PM> Install-Package Maranics.EventSyncService.SDK Prerequisites \u00b6 To be able to send and receive events, following conditions should be in place: * If an application is deployed on the Cloud/HQ location, then it should know location destination id(s); * An application has to be registered in the AppStore and client credentials should be configured; * The following permissions has to be granted for an application in the AppStore: * \"event-sync/events/receive\" - Should allow receive new events and confirm delivery; * \"event-sync/events/send\" - Should allow send new event to destination; * \"event-sync/events/subscribe\" - Should allow subscribe to events. Initialization \u00b6 In order to create client(subscriber), SDK offers builder: - Use EventSyncConnectionBuilder to configure subscriber. - Specify Event Sync Service base URL, register AccessTokenProvider delegate. - Register event handler, if you would like to receive new events from another location. - Register status handler, if you would like to receive updates on sent events. - It is also possible to connect your logger provider, use extensions method ConfigureLogging . var subscriber = new EventSyncConnectionBuilder() .WithCredentials(opt => { opt.AccessTokenProvider = async () => await tokenProvider.GetTokenAsync(); opt.EventSyncUrl = \"https://eventSyncService\"; }) .WithEventHandler(ProcessNewEvent) .WithEventStatusHandler(ProcessStatus) .ConfigureLogging(logging => { logging.AddConsole(); logging.SetMinimumLevel(LogLevel.Debug); }) .Build(); Connecting to service \u00b6 In order to send or receive events, subscriber should connect to the service. Simply call Connect() method. SubscriptionResult result = await subscriber.Connect(); Connect() will retrieve name of a connected application and list of connected tenants, if subscription was successful.\\ Otherwise it will throw an ConnectionException exception. Sending an event to the destination \u00b6 In order to start working with the Event Sync, to send and listen events, you need to create a subscription first. Afterwards you can send a new event so it will be synced to the Cloud/Edge instance, SDK will utilize HTTP protocol to send events. Response will contain id of the posted event. Use the subscriber instance to send events to destination. If you would like to send event from edge to cloud, you should provide: - event object; - event name; - target tenant's name. If you would like to send an event from cloud to edge, you should provide: - event object - the event itself you are trying to send to the destination; - event name - name of your event, any arbitrary string. It is best to use it to map events during consumption; - target tenant's name - to which tenant event will be sent; - destination id - specify location id to which you would like to send an event. Guid eventId = await subscriber.SendEvent(new { EventName = \"EventName\" }, \"nameOfTheEvent\", \"TenantName\", new Guid(\"06e853d2-4dbe-442e-b17b-2e4e525acea9\")); As soon as event was sent, it will have Acknowledged status. It is possible to register delegate using: public static IEventSyncConnectionBuilder WithEventStatusHandler(this IEventSyncConnectionBuilder? eventSyncConnectionBuilder, Func<EventStatusMessage, Task> statusHandler) This delegate will be triggered, when event has reached destination and was consumed by subscriber. Possible statuses : - Acknowledged - message received by sync engine. - In transit - message was sent to the destination but not yet delivered. - Delivered - destination accepted an event. - Finished - message delivery confirmed by the client. All related processes to the event are finished. - Subscriber is missing - message was delivered to the destination but no active subscription was present to process the event. - Unknown - Unknown message id / no status information. Receiving events \u00b6 SDK utilizes SignalR for the consumption of events. It is possible to register a delegate to handle incoming new events: public static IEventSyncConnectionBuilder WithEventHandler(this IEventSyncConnectionBuilder? eventSyncConnectionBuilder, Func<EventMessage, Task> newEventHandler, bool autoComplete = true) EventMessage class represents an incoming event, it has following properties: * EventId - Unique Event Id; * EventContent - Serialized event body; * EventName - Event name; * CreatedOn - Date of when an event was created on a destination location; * RegisteredOn - Date of when an event was registed on a source location; * IsEventFromEdge - Represents whether event is from edge. If false then from Cloud/HQ; * SourceLocationId - Source location id. If null then source is Cloud/HQ; * TenantName - Tenant name to which belongs event. Demo \u00b6 It is possible to post events from both Edge and Cloud instances and to receive from both Edge and Cloud instances. Source code of the demo app contains publishing event from Edge to Cloud . Demo uses AppStore SDK to pass an access token provider.","title":"Maranics.EventSyncService.SDK."},{"location":"examples/event-sync-sdk/#maranicseventsyncservicesdk","text":"Maranics.EventSyncService.SDK is a general purpose Event Sync Service client for .NET. SDK has netstandard2.1 target. The client is developed by (and used-by) Maranics. This SDK offers methods to send and receive events from edge/cloud to cloud/edge instances. Demo | Documentation | Nuget Feed | Git Repository","title":"Maranics.EventSyncService.SDK."},{"location":"examples/event-sync-sdk/#installation","text":"PM> Install-Package Maranics.EventSyncService.SDK","title":"Installation"},{"location":"examples/event-sync-sdk/#prerequisites","text":"To be able to send and receive events, following conditions should be in place: * If an application is deployed on the Cloud/HQ location, then it should know location destination id(s); * An application has to be registered in the AppStore and client credentials should be configured; * The following permissions has to be granted for an application in the AppStore: * \"event-sync/events/receive\" - Should allow receive new events and confirm delivery; * \"event-sync/events/send\" - Should allow send new event to destination; * \"event-sync/events/subscribe\" - Should allow subscribe to events.","title":"Prerequisites"},{"location":"examples/event-sync-sdk/#initialization","text":"In order to create client(subscriber), SDK offers builder: - Use EventSyncConnectionBuilder to configure subscriber. - Specify Event Sync Service base URL, register AccessTokenProvider delegate. - Register event handler, if you would like to receive new events from another location. - Register status handler, if you would like to receive updates on sent events. - It is also possible to connect your logger provider, use extensions method ConfigureLogging . var subscriber = new EventSyncConnectionBuilder() .WithCredentials(opt => { opt.AccessTokenProvider = async () => await tokenProvider.GetTokenAsync(); opt.EventSyncUrl = \"https://eventSyncService\"; }) .WithEventHandler(ProcessNewEvent) .WithEventStatusHandler(ProcessStatus) .ConfigureLogging(logging => { logging.AddConsole(); logging.SetMinimumLevel(LogLevel.Debug); }) .Build();","title":"Initialization"},{"location":"examples/event-sync-sdk/#connecting-to-service","text":"In order to send or receive events, subscriber should connect to the service. Simply call Connect() method. SubscriptionResult result = await subscriber.Connect(); Connect() will retrieve name of a connected application and list of connected tenants, if subscription was successful.\\ Otherwise it will throw an ConnectionException exception.","title":"Connecting to service"},{"location":"examples/event-sync-sdk/#sending-an-event-to-the-destination","text":"In order to start working with the Event Sync, to send and listen events, you need to create a subscription first. Afterwards you can send a new event so it will be synced to the Cloud/Edge instance, SDK will utilize HTTP protocol to send events. Response will contain id of the posted event. Use the subscriber instance to send events to destination. If you would like to send event from edge to cloud, you should provide: - event object; - event name; - target tenant's name. If you would like to send an event from cloud to edge, you should provide: - event object - the event itself you are trying to send to the destination; - event name - name of your event, any arbitrary string. It is best to use it to map events during consumption; - target tenant's name - to which tenant event will be sent; - destination id - specify location id to which you would like to send an event. Guid eventId = await subscriber.SendEvent(new { EventName = \"EventName\" }, \"nameOfTheEvent\", \"TenantName\", new Guid(\"06e853d2-4dbe-442e-b17b-2e4e525acea9\")); As soon as event was sent, it will have Acknowledged status. It is possible to register delegate using: public static IEventSyncConnectionBuilder WithEventStatusHandler(this IEventSyncConnectionBuilder? eventSyncConnectionBuilder, Func<EventStatusMessage, Task> statusHandler) This delegate will be triggered, when event has reached destination and was consumed by subscriber. Possible statuses : - Acknowledged - message received by sync engine. - In transit - message was sent to the destination but not yet delivered. - Delivered - destination accepted an event. - Finished - message delivery confirmed by the client. All related processes to the event are finished. - Subscriber is missing - message was delivered to the destination but no active subscription was present to process the event. - Unknown - Unknown message id / no status information.","title":"Sending an event to the destination"},{"location":"examples/event-sync-sdk/#receiving-events","text":"SDK utilizes SignalR for the consumption of events. It is possible to register a delegate to handle incoming new events: public static IEventSyncConnectionBuilder WithEventHandler(this IEventSyncConnectionBuilder? eventSyncConnectionBuilder, Func<EventMessage, Task> newEventHandler, bool autoComplete = true) EventMessage class represents an incoming event, it has following properties: * EventId - Unique Event Id; * EventContent - Serialized event body; * EventName - Event name; * CreatedOn - Date of when an event was created on a destination location; * RegisteredOn - Date of when an event was registed on a source location; * IsEventFromEdge - Represents whether event is from edge. If false then from Cloud/HQ; * SourceLocationId - Source location id. If null then source is Cloud/HQ; * TenantName - Tenant name to which belongs event.","title":"Receiving events"},{"location":"examples/event-sync-sdk/#demo","text":"It is possible to post events from both Edge and Cloud instances and to receive from both Edge and Cloud instances. Source code of the demo app contains publishing event from Edge to Cloud . Demo uses AppStore SDK to pass an access token provider.","title":"Demo"},{"location":"examples/notifications-sdk/","text":"Maranics.Notifications.SDK \u00b6 This SDK offers methods to send and receive notifications to/from any application which is registered in App store. Demo | Documentation | Nuget Feed | Git Repository Prerequisites \u00b6 To be able to send and receive notifications following conditions should be implemented: Application has to be registered in AppStore and client credentials configured Following permissions has to be granted for application in AppStore: \"Subscribe to receive new notifications and confirm delivery.\" (notification-service/notifications/subscribe) - to be able to subscribe and receive regular notifications \"Send new notifications to destination.\" (notification-service/notifications/send) - to be able to send notifications \"View (retrieve) notifications.\" (notification-service/notifications/view) - to be able to retrieve notifications \"Change notification status as read.\" (notification-service/notifications/mark-as-read) - to be able to mark notification as read \"Manage push notification subscriptions (e.g. register, delete).\" (notification-service/push-notification-subscriptions/manage) - to be able to register push notification subscriptions Initialization \u00b6 You can add notifications functionality in any service via dependency injection. using Maranics.AppStore.SDK; public IConfiguration Configuration { get; } public Startup(IConfiguration configuration) { Configuration = configuration; } public void ConfigureServices(IServiceCollection services) { services.ConfigureAppStore(Configuration); services.AddNotifications(configuration, serviceProvider => { var tokenProvider = serviceProvider.GetService<IAccessTokenProvider>(); return tokenProvider!.GetTokenAsync(); }); } public void Configure(IApplicationBuilder app) { app.UseAppStore(); } Note: AppSettings.json requires the following section for the auto configuration. \"AppStoreSettings\": { \"ClientId\": \"key\", \"ClientSecret\": \"secretKey\", \"AppStoreUrl\": \"url\" }, \"NotificationServiceEndpoint\": { \"BaseUrl\": \"notification_service_base_url\", \"ApiBasePath\": \"/api\", \"NotificationsHubPath\": \"/hub/notifications\" } Notification sending \u00b6 The example uses a background service to send notification (regular and push notifications) to single recipient each 5 seconds. Injected INotificationsManager instance is used to send, retrieve and mark as read. using Maranics.Notifications.SDK; namespace Notifications.SDK.Demo { public class NotificationSenderService : BackgroundService { private readonly INotificationsManager _notificationsManager; private readonly ILogger<NotificationSenderService> _logger; public NotificationSenderService(INotificationsManager notificationsManager, ILogger<NotificationSenderService> logger) { _notificationsManager = notificationsManager; _logger = logger; } protected override async Task ExecuteAsync(CancellationToken cancellationToken) { const string tenant = \"Development\"; Notification notification; int currentMessageIndex = 1; var request = new DispatchNotificationRequest() { Source = new NotificationSource() { SenderId = Guid.NewGuid().ToString(), SenderName = Constants.AppName }, Content = new NotificationContent() { Type = NotificationType.Information, }, RecipientFilters = new List<NotificationRecipientFilter>() { new NotificationRecipientFilter(){ Scope = Constants.AppName, LocationId = Guid.NewGuid(), Users = new List<Guid>(){ Guid.NewGuid() } } } }; while (cancellationToken.IsCancellationRequested == false) { request.Content.Body = $\"Message #{currentMessageIndex}\"; DispatchNotificationResponse response = await _notificationsManager.DispatchNotificationAsync(tenant, body: request); foreach (var notificationId in response.NotificationIds) { notification = _notificationsManager.GetNotification(notificationId, tenant); _logger.LogInformation($\"Notification (id: {notification.NotificationId}) sent to user {notification.UserId}.\"); } currentMessageIndex++; await Task.Delay(TimeSpan.FromSeconds(5)); } } } } Subscribe and receive notifications \u00b6 The example uses a background service to subscribe and receive notifications in real time. ProcessSubscription and ProcessNewNotification are passed as delegates to NotificationsListener.Subscribe method. Subscriber application name should be provided as well. using Maranics.Notifications.SDK; using Maranics.Notifications.SDK.Models; using Notifications.SDK.Demo; public class NotificationListenerService : IHostedService { private readonly NotificationsListener _notificationListener; private readonly ILogger<NotificationListenerService> _logger; public NotificationListenerService(NotificationsListener notificationListener, ILogger<NotificationListenerService> logger) { _notificationListener = notificationListener; _logger = logger; } public async Task StartAsync(CancellationToken cancellationToken) { _logger.LogInformation(\"Notification Listener Service is starting.\"); await _notificationListener.Subscribe(new SubscribeToNotificationsRequest { ApplicationName = Constants.AppName }, ProcessNewNotification, ProcessSubscription, cancellationToken); _logger.LogInformation(\"Notification Listener Service is running.\"); } public Task StopAsync(CancellationToken cancellationToken) { _logger.LogInformation(\"Notification Listener Service is stopping.\"); return Task.CompletedTask; } private Task ProcessNewNotification(ReceiveNotificationMessage notificationMessage) { _logger.LogInformation(@$\"New notification received from notification service: Notification Id: {notificationMessage.NotificationId} Notification created on: {notificationMessage.CreatedOn} Notification content: {notificationMessage.Content}\"); return Task.CompletedTask; } private Task ProcessSubscription(SubscribeToNotificationsResponse subscription) { if (!string.IsNullOrEmpty(subscription.Result?.ApplicationName)) { foreach (var tenant in subscription.Result.TenantNames ?? Enumerable.Empty<string>()) { _logger.LogInformation($\"Application '{Constants.AppName}': Tenant {tenant} is connected to listen notifications.\"); } } else { _logger.LogWarning($\"Application '{Constants.AppName}': Failed to subscribe - {subscription.Error?.Message}\"); } return Task.CompletedTask; } } VAPID (Voluntary Application Server Identity) key retrieval \u00b6 The example shows how to retrieve VAPID key needed for push notification subscription creation in browser. app.MapGet(\"/subscriptions/vapid\", ([FromServices] IPushNotificationSubscriptionsManager pushNotificationSubscriptionsManager) => { return pushNotificationSubscriptionsManager.GetVapidPublicKey(tenant); }); Push notification subscription registration and removal \u00b6 Once push notification subscription is made, it should be registered in Notification service using SDK to be able to send push notification to corresponding users. Push notification subscription registration using IPushNotificationSubscriptionsManager.RegisterPushNotificationSubscription example: app.MapPost(\"/subscriptions\", (Subscription subscription, [FromServices] IPushNotificationSubscriptionsManager pushNotificationSubscriptionsManager) => { var pushNotificationSubscription = new PushNotificationSubscription() { Endpoint = subscription.Endpoint, PublicKey = subscription.PublicKey, AuthKey = subscription.AuthKey, ApplicationServerKey = subscription.Vapid, Scope = subscription.AppName, UserId = subscription.UserId }; return pushNotificationSubscriptionsManager.RegisterPushNotificationSubscription(tenant, body: pushNotificationSubscription); }); Push notification subscription removal (should be called once unsubscribe) using IPushNotificationSubscriptionsManager.RemovePushNotificationSubscription example: app.MapDelete(\"subscriptions\", ([FromQuery(Name = \"endpoint\")] string endpoint, [FromServices] IPushNotificationSubscriptionsManager pushNotificationSubscriptionsManager) => { pushNotificationSubscriptionsManager.RemovePushNotificationSubscription(endpoint, tenant); });","title":"Notifications SDK"},{"location":"examples/notifications-sdk/#maranicsnotificationssdk","text":"This SDK offers methods to send and receive notifications to/from any application which is registered in App store. Demo | Documentation | Nuget Feed | Git Repository","title":"Maranics.Notifications.SDK"},{"location":"examples/notifications-sdk/#prerequisites","text":"To be able to send and receive notifications following conditions should be implemented: Application has to be registered in AppStore and client credentials configured Following permissions has to be granted for application in AppStore: \"Subscribe to receive new notifications and confirm delivery.\" (notification-service/notifications/subscribe) - to be able to subscribe and receive regular notifications \"Send new notifications to destination.\" (notification-service/notifications/send) - to be able to send notifications \"View (retrieve) notifications.\" (notification-service/notifications/view) - to be able to retrieve notifications \"Change notification status as read.\" (notification-service/notifications/mark-as-read) - to be able to mark notification as read \"Manage push notification subscriptions (e.g. register, delete).\" (notification-service/push-notification-subscriptions/manage) - to be able to register push notification subscriptions","title":"Prerequisites"},{"location":"examples/notifications-sdk/#initialization","text":"You can add notifications functionality in any service via dependency injection. using Maranics.AppStore.SDK; public IConfiguration Configuration { get; } public Startup(IConfiguration configuration) { Configuration = configuration; } public void ConfigureServices(IServiceCollection services) { services.ConfigureAppStore(Configuration); services.AddNotifications(configuration, serviceProvider => { var tokenProvider = serviceProvider.GetService<IAccessTokenProvider>(); return tokenProvider!.GetTokenAsync(); }); } public void Configure(IApplicationBuilder app) { app.UseAppStore(); } Note: AppSettings.json requires the following section for the auto configuration. \"AppStoreSettings\": { \"ClientId\": \"key\", \"ClientSecret\": \"secretKey\", \"AppStoreUrl\": \"url\" }, \"NotificationServiceEndpoint\": { \"BaseUrl\": \"notification_service_base_url\", \"ApiBasePath\": \"/api\", \"NotificationsHubPath\": \"/hub/notifications\" }","title":"Initialization"},{"location":"examples/notifications-sdk/#notification-sending","text":"The example uses a background service to send notification (regular and push notifications) to single recipient each 5 seconds. Injected INotificationsManager instance is used to send, retrieve and mark as read. using Maranics.Notifications.SDK; namespace Notifications.SDK.Demo { public class NotificationSenderService : BackgroundService { private readonly INotificationsManager _notificationsManager; private readonly ILogger<NotificationSenderService> _logger; public NotificationSenderService(INotificationsManager notificationsManager, ILogger<NotificationSenderService> logger) { _notificationsManager = notificationsManager; _logger = logger; } protected override async Task ExecuteAsync(CancellationToken cancellationToken) { const string tenant = \"Development\"; Notification notification; int currentMessageIndex = 1; var request = new DispatchNotificationRequest() { Source = new NotificationSource() { SenderId = Guid.NewGuid().ToString(), SenderName = Constants.AppName }, Content = new NotificationContent() { Type = NotificationType.Information, }, RecipientFilters = new List<NotificationRecipientFilter>() { new NotificationRecipientFilter(){ Scope = Constants.AppName, LocationId = Guid.NewGuid(), Users = new List<Guid>(){ Guid.NewGuid() } } } }; while (cancellationToken.IsCancellationRequested == false) { request.Content.Body = $\"Message #{currentMessageIndex}\"; DispatchNotificationResponse response = await _notificationsManager.DispatchNotificationAsync(tenant, body: request); foreach (var notificationId in response.NotificationIds) { notification = _notificationsManager.GetNotification(notificationId, tenant); _logger.LogInformation($\"Notification (id: {notification.NotificationId}) sent to user {notification.UserId}.\"); } currentMessageIndex++; await Task.Delay(TimeSpan.FromSeconds(5)); } } } }","title":"Notification sending"},{"location":"examples/notifications-sdk/#subscribe-and-receive-notifications","text":"The example uses a background service to subscribe and receive notifications in real time. ProcessSubscription and ProcessNewNotification are passed as delegates to NotificationsListener.Subscribe method. Subscriber application name should be provided as well. using Maranics.Notifications.SDK; using Maranics.Notifications.SDK.Models; using Notifications.SDK.Demo; public class NotificationListenerService : IHostedService { private readonly NotificationsListener _notificationListener; private readonly ILogger<NotificationListenerService> _logger; public NotificationListenerService(NotificationsListener notificationListener, ILogger<NotificationListenerService> logger) { _notificationListener = notificationListener; _logger = logger; } public async Task StartAsync(CancellationToken cancellationToken) { _logger.LogInformation(\"Notification Listener Service is starting.\"); await _notificationListener.Subscribe(new SubscribeToNotificationsRequest { ApplicationName = Constants.AppName }, ProcessNewNotification, ProcessSubscription, cancellationToken); _logger.LogInformation(\"Notification Listener Service is running.\"); } public Task StopAsync(CancellationToken cancellationToken) { _logger.LogInformation(\"Notification Listener Service is stopping.\"); return Task.CompletedTask; } private Task ProcessNewNotification(ReceiveNotificationMessage notificationMessage) { _logger.LogInformation(@$\"New notification received from notification service: Notification Id: {notificationMessage.NotificationId} Notification created on: {notificationMessage.CreatedOn} Notification content: {notificationMessage.Content}\"); return Task.CompletedTask; } private Task ProcessSubscription(SubscribeToNotificationsResponse subscription) { if (!string.IsNullOrEmpty(subscription.Result?.ApplicationName)) { foreach (var tenant in subscription.Result.TenantNames ?? Enumerable.Empty<string>()) { _logger.LogInformation($\"Application '{Constants.AppName}': Tenant {tenant} is connected to listen notifications.\"); } } else { _logger.LogWarning($\"Application '{Constants.AppName}': Failed to subscribe - {subscription.Error?.Message}\"); } return Task.CompletedTask; } }","title":"Subscribe and receive notifications"},{"location":"examples/notifications-sdk/#vapid-voluntary-application-server-identity-key-retrieval","text":"The example shows how to retrieve VAPID key needed for push notification subscription creation in browser. app.MapGet(\"/subscriptions/vapid\", ([FromServices] IPushNotificationSubscriptionsManager pushNotificationSubscriptionsManager) => { return pushNotificationSubscriptionsManager.GetVapidPublicKey(tenant); });","title":"VAPID (Voluntary Application Server Identity) key retrieval"},{"location":"examples/notifications-sdk/#push-notification-subscription-registration-and-removal","text":"Once push notification subscription is made, it should be registered in Notification service using SDK to be able to send push notification to corresponding users. Push notification subscription registration using IPushNotificationSubscriptionsManager.RegisterPushNotificationSubscription example: app.MapPost(\"/subscriptions\", (Subscription subscription, [FromServices] IPushNotificationSubscriptionsManager pushNotificationSubscriptionsManager) => { var pushNotificationSubscription = new PushNotificationSubscription() { Endpoint = subscription.Endpoint, PublicKey = subscription.PublicKey, AuthKey = subscription.AuthKey, ApplicationServerKey = subscription.Vapid, Scope = subscription.AppName, UserId = subscription.UserId }; return pushNotificationSubscriptionsManager.RegisterPushNotificationSubscription(tenant, body: pushNotificationSubscription); }); Push notification subscription removal (should be called once unsubscribe) using IPushNotificationSubscriptionsManager.RemovePushNotificationSubscription example: app.MapDelete(\"subscriptions\", ([FromQuery(Name = \"endpoint\")] string endpoint, [FromServices] IPushNotificationSubscriptionsManager pushNotificationSubscriptionsManager) => { pushNotificationSubscriptionsManager.RemovePushNotificationSubscription(endpoint, tenant); });","title":"Push notification subscription registration and removal"},{"location":"general-information/","text":"During the process of creating your integration you will bump into words and functions that are explained in this chapter.","title":"General Information"},{"location":"general-information/authorization/","text":"","title":"Authorization"},{"location":"general-information/flow/","text":"","title":"Flow"},{"location":"general-information/multitenancy/","text":"what changes for the api calls","title":"Multitenancy"},{"location":"general-information/syncronization/","text":"how does it work how to use it file sync?","title":"Syncronization"},{"location":"general-information/versioning/","text":"breaking changes between major version new api's and properties between minor version - existing api's will not have any breaking changes changelog between API versions","title":"Versioning"},{"location":"general-information/documentation/","text":"","title":"Documentation"},{"location":"general-information/documentation/permissions/","text":"","title":"Permissions"},{"location":"general-information/documentation/validation/","text":"","title":"Validation"},{"location":"general-information/templates/","text":"","title":"Templates"},{"location":"general-information/templates/approval/","text":"","title":"Approval"},{"location":"general-information/templates/message-bus/","text":"","title":"Message bus"},{"location":"general-information/templates/permissions/","text":"","title":"Permissions"},{"location":"general-information/templates/synchronization/","text":"","title":"Synchronization"},{"location":"general-information/templates/webhooks/","text":"","title":"Webhooks"},{"location":"general-information/user-management/","text":"","title":"User Management"},{"location":"general-information/user-management/locations/","text":"","title":"Locations"},{"location":"general-information/user-management/permissions/","text":"","title":"Permissions"},{"location":"general-information/user-management/position/","text":"","title":"Position"},{"location":"general-information/user-management/user/","text":"","title":"User"},{"location":"release-notes/","text":"In this category you can find the release notes of all our applications.","title":"Release Notes"},{"location":"release-notes/bundle/","text":"Deployment bundles represent a collection of all applications with a specific version. The specific app versions in a bundle are validated to play nice together. A bundle does not represent a complete list of applications that are deployed. Depending on the customer and use case only a subset of applications might be deployed. However when adding additional applications to a deployment they will use the version specified in the deployed bundle version. V1.0.7 \u00b6 Note : Application Type Version User Management App v2.1.19 Launcher App v1.2.0 Flow App v2.8.5 Template App v2.8.5 Documentation App v3.0.10 Portal App v2.1.4 Barrier Model App v2.1.10 Automation App nightly App Store Service v1.1.0 API Gateway Service v1.0.3 Data Register Service v2.0.4 Monitoring Service v1.0.3 Notifications Service v1.0.2 PDF Generator Service v2.2.2 RemoteExecution Service v2.1.4 Sync Service v1.2.2 V1.0.6 \u00b6 Note : Low connectivity improvements Application Type Version User Management App v2.1.18 Launcher App v1.1.4 Flow App v2.7.0 Template App v2.7.0 Documentation App v3.0.9 Portal App v2.1.3 Barrier Model App v2.1.10 Automation App nightly App Store Service v1.0.4 API Gateway Service v1.0.2 Data Register Service v2.0.3 Monitoring Service v1.0.2 Notifications Service v1.0.2 PDF Generator Service v2.2.2 RemoteExecution Service v2.1.4 Sync Service v1.2.2 V1.0.5 \u00b6 Note : Stability improvements Application Type Version User Management App v2.1.17 Launcher App v1.1.4 Flow App v2.6.9 Template App v2.6.9 Documentation App v3.0.8 Portal App v2.1.3 Barrier Model App v2.1.10 Automation App nightly App Store Service v1.0.2 API Gateway Service v1.0.2 Data Register Service v2.0.3 Monitoring Service v1.0.2 Notifications Service v1.0.2 PDF Generator Service v2.2.2 RemoteExecution Service v2.1.4 Sync Service v1.2.2 V1.0.4 \u00b6 Note : Automatic bug reporting endpoint changed for all services Application Type Version User Management App v2.1.15 Launcher App v1.1.3 Flow App v2.6.8 Template App v2.6.8 Documentation App v3.0.7 Portal App v2.1.3 Barrier Model App v2.1.10 Automation App nightly App Store Service v1.0.2 API Gateway Service v1.0.2 Data Register Service v2.0.3 Monitoring Service v1.0.2 Notifications Service v1.0.2 PDF Generator Service v2.2.2 RemoteExecution Service v2.1.4 Sync Service v1.2.2 V1.0.3 \u00b6 New Applications: App store and automation application Application Type Version User Management App v2.1.12 Launcher App v1.1.1 Flow App v2.6.5 Template App v2.6.5 Documentation App v3.0.6 Portal App v2.1.1 Barrier Model App v2.1.8 Automation App nightly App Store Service v1.0.1 API Gateway Service v1.0.1 Data Register Service v2.0.2 Monitoring Service v1.0.1 Notifications Service v1.0.2 PDF Generator Service v2.2.1 RemoteExecution Service v2.1.3 Sync Service v1.2.1.0 V1.0.1 \u00b6 Note: Introduction of an API gateway to introduce a consistent API endpoint. Application Type Version User Management App v2.1.11 Launcher App v1.1.0.6 Flow App v2.6.4 Template App v2.6.4 Documentation App v3.0.5 Portal App v2.1.1 Barrier Model App v2.1.8 Automation App nightly API Gateway Service v1.0.0 Data Register Service v2.0.1 Monitoring Service v1.0.0.2 Notifications Service v1.0.1 PDF Generator Service v2.2.1 RemoteExecution Service v2.1.2.1 Sync Service v1.2.1.0 V1.0.0 \u00b6 Application Type Version User Management App v2.1.10 Launcher App v1.1.0.5 Flow App v2.6.1 Template App v2.6.1 Documentation App v3.0.4.1 Portal App v2.1.0.8 Barrier Model App v2.1.1.7 Automation App nightly Data Register Service v2.0.0.2 Monitoring Service v1.0.0.2 Notifications Service v1.0.1 PDF Generator Service v2.2.0 RemoteExecution Service v2.1.2.1 Sync Service v1.2.1.0","title":"Deployment Bundles"},{"location":"release-notes/bundle/#v107","text":"Note : Application Type Version User Management App v2.1.19 Launcher App v1.2.0 Flow App v2.8.5 Template App v2.8.5 Documentation App v3.0.10 Portal App v2.1.4 Barrier Model App v2.1.10 Automation App nightly App Store Service v1.1.0 API Gateway Service v1.0.3 Data Register Service v2.0.4 Monitoring Service v1.0.3 Notifications Service v1.0.2 PDF Generator Service v2.2.2 RemoteExecution Service v2.1.4 Sync Service v1.2.2","title":"V1.0.7"},{"location":"release-notes/bundle/#v106","text":"Note : Low connectivity improvements Application Type Version User Management App v2.1.18 Launcher App v1.1.4 Flow App v2.7.0 Template App v2.7.0 Documentation App v3.0.9 Portal App v2.1.3 Barrier Model App v2.1.10 Automation App nightly App Store Service v1.0.4 API Gateway Service v1.0.2 Data Register Service v2.0.3 Monitoring Service v1.0.2 Notifications Service v1.0.2 PDF Generator Service v2.2.2 RemoteExecution Service v2.1.4 Sync Service v1.2.2","title":"V1.0.6"},{"location":"release-notes/bundle/#v105","text":"Note : Stability improvements Application Type Version User Management App v2.1.17 Launcher App v1.1.4 Flow App v2.6.9 Template App v2.6.9 Documentation App v3.0.8 Portal App v2.1.3 Barrier Model App v2.1.10 Automation App nightly App Store Service v1.0.2 API Gateway Service v1.0.2 Data Register Service v2.0.3 Monitoring Service v1.0.2 Notifications Service v1.0.2 PDF Generator Service v2.2.2 RemoteExecution Service v2.1.4 Sync Service v1.2.2","title":"V1.0.5"},{"location":"release-notes/bundle/#v104","text":"Note : Automatic bug reporting endpoint changed for all services Application Type Version User Management App v2.1.15 Launcher App v1.1.3 Flow App v2.6.8 Template App v2.6.8 Documentation App v3.0.7 Portal App v2.1.3 Barrier Model App v2.1.10 Automation App nightly App Store Service v1.0.2 API Gateway Service v1.0.2 Data Register Service v2.0.3 Monitoring Service v1.0.2 Notifications Service v1.0.2 PDF Generator Service v2.2.2 RemoteExecution Service v2.1.4 Sync Service v1.2.2","title":"V1.0.4"},{"location":"release-notes/bundle/#v103","text":"New Applications: App store and automation application Application Type Version User Management App v2.1.12 Launcher App v1.1.1 Flow App v2.6.5 Template App v2.6.5 Documentation App v3.0.6 Portal App v2.1.1 Barrier Model App v2.1.8 Automation App nightly App Store Service v1.0.1 API Gateway Service v1.0.1 Data Register Service v2.0.2 Monitoring Service v1.0.1 Notifications Service v1.0.2 PDF Generator Service v2.2.1 RemoteExecution Service v2.1.3 Sync Service v1.2.1.0","title":"V1.0.3"},{"location":"release-notes/bundle/#v101","text":"Note: Introduction of an API gateway to introduce a consistent API endpoint. Application Type Version User Management App v2.1.11 Launcher App v1.1.0.6 Flow App v2.6.4 Template App v2.6.4 Documentation App v3.0.5 Portal App v2.1.1 Barrier Model App v2.1.8 Automation App nightly API Gateway Service v1.0.0 Data Register Service v2.0.1 Monitoring Service v1.0.0.2 Notifications Service v1.0.1 PDF Generator Service v2.2.1 RemoteExecution Service v2.1.2.1 Sync Service v1.2.1.0","title":"V1.0.1"},{"location":"release-notes/bundle/#v100","text":"Application Type Version User Management App v2.1.10 Launcher App v1.1.0.5 Flow App v2.6.1 Template App v2.6.1 Documentation App v3.0.4.1 Portal App v2.1.0.8 Barrier Model App v2.1.1.7 Automation App nightly Data Register Service v2.0.0.2 Monitoring Service v1.0.0.2 Notifications Service v1.0.1 PDF Generator Service v2.2.0 RemoteExecution Service v2.1.2.1 Sync Service v1.2.1.0","title":"V1.0.0"},{"location":"release-notes/apps/automation/","text":"Nightly \u00b6 ..","title":"Automation (Elsa)"},{"location":"release-notes/apps/automation/#nightly","text":"..","title":"Nightly"},{"location":"release-notes/apps/barrier-model/","text":"v2.1.10 \u00b6 [low] Automatic bug reporting endpoint changed v2.1.8 \u00b6 CORS option for API access v2.1.1.7 \u00b6 ..","title":"Barrier Model"},{"location":"release-notes/apps/barrier-model/#v2110","text":"[low] Automatic bug reporting endpoint changed","title":"v2.1.10"},{"location":"release-notes/apps/barrier-model/#v218","text":"CORS option for API access","title":"v2.1.8"},{"location":"release-notes/apps/barrier-model/#v2117","text":"..","title":"v2.1.1.7"},{"location":"release-notes/apps/documentation/","text":"v3.0.10 \u00b6 AppStore SDK update v3.0.9 \u00b6 API description update v3.0.8 \u00b6 Bug-fixes and improvements Lib updates [medium] Improved search experience on mobile [medium] Fixed creating page via Pages/POST/api/pages creates the page that is impossible to open bug [low] Added book list & shelf list dynamical loaders [low] Improved image resize changes image properties and proportions [low] Improved metadata duplication error v3.0.7 \u00b6 Bug-fixes and improvements [High] Fixed issue with customised page verification settings. Removing positions from \"Verifiers selected by default\" list was updated only visually, and the data was not saver correctly. [High] Fixed issue with loss of verification interval during the page edit process. [Medium] Improved UI for application drawer in Documentation app. [Medium] Page can have a diverse type of content now and it does not affect page creation. [Medium] Now the update webhook is triggered when changes are made to a published and verified page. [low] Automatic bug reporting endpoint changed v3.0.6 \u00b6 v3.0.5 \u00b6 Bug-fixes and improvements: [very high] When creating a chapter using the API, a unique ID for the chapter is generated automatically to avoid ID duplication [high] POST/api/chapters/{chapterId} now uses PATCH method and new name is PATCH/api/chapters/{id} [medium] Archive page in Documentation app now shows the valid information about archived items Features: [medium] Implemented search in Documentation's topbar [medium] Changelog and Build information now is available for Documentation app v3.0.4.1 \u00b6","title":"Documentation"},{"location":"release-notes/apps/documentation/#v3010","text":"AppStore SDK update","title":"v3.0.10"},{"location":"release-notes/apps/documentation/#v309","text":"API description update","title":"v3.0.9"},{"location":"release-notes/apps/documentation/#v308","text":"Bug-fixes and improvements Lib updates [medium] Improved search experience on mobile [medium] Fixed creating page via Pages/POST/api/pages creates the page that is impossible to open bug [low] Added book list & shelf list dynamical loaders [low] Improved image resize changes image properties and proportions [low] Improved metadata duplication error","title":"v3.0.8"},{"location":"release-notes/apps/documentation/#v307","text":"Bug-fixes and improvements [High] Fixed issue with customised page verification settings. Removing positions from \"Verifiers selected by default\" list was updated only visually, and the data was not saver correctly. [High] Fixed issue with loss of verification interval during the page edit process. [Medium] Improved UI for application drawer in Documentation app. [Medium] Page can have a diverse type of content now and it does not affect page creation. [Medium] Now the update webhook is triggered when changes are made to a published and verified page. [low] Automatic bug reporting endpoint changed","title":"v3.0.7"},{"location":"release-notes/apps/documentation/#v306","text":"","title":"v3.0.6"},{"location":"release-notes/apps/documentation/#v305","text":"Bug-fixes and improvements: [very high] When creating a chapter using the API, a unique ID for the chapter is generated automatically to avoid ID duplication [high] POST/api/chapters/{chapterId} now uses PATCH method and new name is PATCH/api/chapters/{id} [medium] Archive page in Documentation app now shows the valid information about archived items Features: [medium] Implemented search in Documentation's topbar [medium] Changelog and Build information now is available for Documentation app","title":"v3.0.5"},{"location":"release-notes/apps/documentation/#v3041","text":"","title":"v3.0.4.1"},{"location":"release-notes/apps/flow/","text":"v2.8.5 \u00b6 Major feature: Low connectivity support Low connectivity mode (small events, event caching, smart connection loss recovery) Get override reasons when swipe left Named parameters in API calls Section complete webhook Send text before and text after in webhooks Removed: Auto collapse of sections AppStore SDK update Bugfixes v2.7.0 \u00b6 API description updates New API to clear task UI improvements [Very high] Fixed with slow network pictures and signs are not always displayed and Webhook is sent, but check box is unchecked bug [Very high] Fixed working two users in flow app bug [Very high] Fixed Webhook is not sent on its own, if Checkbox have multiple options bug [High] Make task requests with file upload connection independent [High] Fixed lickering when two users work in the same checklist bug [Medium] Fixed offline comment pictures are not uploaded bug [Medium] Fixed if signature is first in dual task, it does not load after finishing task bug [Medium] Fixed applying cache queries doesn't happen after Quick Input Modal confirm bug v2.6.9 \u00b6 Bug-fixes and improvements: Offline improvements to picture upload API updates Bugfixes [Very high] Fixed set due time on checklist start (mobile) bug [Very high] Additional task details are added in json response [Very high] Fixed adding picture process is stuck in Flow [Medium] Set values on Date/Time controls with swipe v2.6.8 \u00b6 Bug-fixes and improvements: [Very high] Major improvements in webhook trigger performance when working in conditions of poor internet signal. [Very high] Fixed issue with date and time control UI layout compatibility with mobile devices. [Very high] Improved logic for discarded template recovery. [Very high] GET \u200b/api\u200b/flows\u200b/{flowId}\u200b/tasks now is updating Request URL with a value from {flowId}\u200b field. [High] Major user interface improvements: completion of the item does not switch the flow view, sections are not closed after picture, sign, file upload in tasks, possible to close comment filter block. [High] Time before template is deleted now can't exceed 50 months and wrong values now does not prevent the flow from being completed or discarded. [Medium] Fixed bugs with modal window display fopr date, signature, picture and file upload tasks. [low] Automatic bug reporting endpoint changed Features: [Very high] Implemented the asynchronous mode that allows users to work in in conditions of poor internet signal. [Very high] Added indicators to show task upload process to improve usability. v2.6.7 \u00b6 Bug-fixes and improvements: [high] Fixed flushing action groups for asynchronous UI actions [high] Fixed flow completion issue for templates with archive timeout beyond limit Features: [medium] Possibility to set current D/T value by swiping DateTime, Date or Time task v2.6.6 \u00b6 Bug-fixes and improvements: [high] Prevent blocking UI on bad connections (asynchronous UI actions) [high] Prevent saving value right on change for DT picker if it is in double control [medium] Allow to recover discarded checklists that were not finished [medium] Disable override option when template is active v2.6.5 \u00b6 v2.6.4 \u00b6 Bug-fixes and improvements: [high] Fixed section complete webhook trigger [high] Improvements in external access to the flows [high] Solved issue with webhook multiplication [medium] Pictures now are included in Api/GenerateChecklistPdf report [medium] Signature is displayed fully in the list control [medium] In handovered checklists in consecutive long text control long value without spaces does not go out of the window anymore [medium] Not seeing the first item of the next section once a section is completed issue is fixed now [medium] Discarded checklist list is not affected by switching filter [medium] When switching between sections, user will always see the first item in the section [medium] It is now possible to select current date and time for date and time controls on the Android phones [medium] Improved long text control diplay in the flow view [low] Fixed item scrolling in sections Features: - [very high] Date and time control was built into the layout and now is more responsive v2.6.1 \u00b6 ...","title":"Flow"},{"location":"release-notes/apps/flow/#v285","text":"Major feature: Low connectivity support Low connectivity mode (small events, event caching, smart connection loss recovery) Get override reasons when swipe left Named parameters in API calls Section complete webhook Send text before and text after in webhooks Removed: Auto collapse of sections AppStore SDK update Bugfixes","title":"v2.8.5"},{"location":"release-notes/apps/flow/#v270","text":"API description updates New API to clear task UI improvements [Very high] Fixed with slow network pictures and signs are not always displayed and Webhook is sent, but check box is unchecked bug [Very high] Fixed working two users in flow app bug [Very high] Fixed Webhook is not sent on its own, if Checkbox have multiple options bug [High] Make task requests with file upload connection independent [High] Fixed lickering when two users work in the same checklist bug [Medium] Fixed offline comment pictures are not uploaded bug [Medium] Fixed if signature is first in dual task, it does not load after finishing task bug [Medium] Fixed applying cache queries doesn't happen after Quick Input Modal confirm bug","title":"v2.7.0"},{"location":"release-notes/apps/flow/#v269","text":"Bug-fixes and improvements: Offline improvements to picture upload API updates Bugfixes [Very high] Fixed set due time on checklist start (mobile) bug [Very high] Additional task details are added in json response [Very high] Fixed adding picture process is stuck in Flow [Medium] Set values on Date/Time controls with swipe","title":"v2.6.9"},{"location":"release-notes/apps/flow/#v268","text":"Bug-fixes and improvements: [Very high] Major improvements in webhook trigger performance when working in conditions of poor internet signal. [Very high] Fixed issue with date and time control UI layout compatibility with mobile devices. [Very high] Improved logic for discarded template recovery. [Very high] GET \u200b/api\u200b/flows\u200b/{flowId}\u200b/tasks now is updating Request URL with a value from {flowId}\u200b field. [High] Major user interface improvements: completion of the item does not switch the flow view, sections are not closed after picture, sign, file upload in tasks, possible to close comment filter block. [High] Time before template is deleted now can't exceed 50 months and wrong values now does not prevent the flow from being completed or discarded. [Medium] Fixed bugs with modal window display fopr date, signature, picture and file upload tasks. [low] Automatic bug reporting endpoint changed Features: [Very high] Implemented the asynchronous mode that allows users to work in in conditions of poor internet signal. [Very high] Added indicators to show task upload process to improve usability.","title":"v2.6.8"},{"location":"release-notes/apps/flow/#v267","text":"Bug-fixes and improvements: [high] Fixed flushing action groups for asynchronous UI actions [high] Fixed flow completion issue for templates with archive timeout beyond limit Features: [medium] Possibility to set current D/T value by swiping DateTime, Date or Time task","title":"v2.6.7"},{"location":"release-notes/apps/flow/#v266","text":"Bug-fixes and improvements: [high] Prevent blocking UI on bad connections (asynchronous UI actions) [high] Prevent saving value right on change for DT picker if it is in double control [medium] Allow to recover discarded checklists that were not finished [medium] Disable override option when template is active","title":"v2.6.6"},{"location":"release-notes/apps/flow/#v265","text":"","title":"v2.6.5"},{"location":"release-notes/apps/flow/#v264","text":"Bug-fixes and improvements: [high] Fixed section complete webhook trigger [high] Improvements in external access to the flows [high] Solved issue with webhook multiplication [medium] Pictures now are included in Api/GenerateChecklistPdf report [medium] Signature is displayed fully in the list control [medium] In handovered checklists in consecutive long text control long value without spaces does not go out of the window anymore [medium] Not seeing the first item of the next section once a section is completed issue is fixed now [medium] Discarded checklist list is not affected by switching filter [medium] When switching between sections, user will always see the first item in the section [medium] It is now possible to select current date and time for date and time controls on the Android phones [medium] Improved long text control diplay in the flow view [low] Fixed item scrolling in sections Features: - [very high] Date and time control was built into the layout and now is more responsive","title":"v2.6.4"},{"location":"release-notes/apps/flow/#v261","text":"...","title":"v2.6.1"},{"location":"release-notes/apps/launcher/","text":"v1.2.0 \u00b6 Removed: User invite option AppStore SDK update v1.1.4 \u00b6 Bug-fixes and improvements: [medium] Back button added to mobile [medium] Fixed issue where screen for select workspace dont work on iPhone [medium] Workspace name is now case insensitive Lib updates v1.1.3 \u00b6 [low] Automatic bug reporting endpoint changed v1.1.0.6 \u00b6 Internal refactoring [very high] Solved issues with new tenant creation on multitenancy environments v1.1.0.5 \u00b6 ..","title":"Launcher"},{"location":"release-notes/apps/launcher/#v120","text":"Removed: User invite option AppStore SDK update","title":"v1.2.0"},{"location":"release-notes/apps/launcher/#v114","text":"Bug-fixes and improvements: [medium] Back button added to mobile [medium] Fixed issue where screen for select workspace dont work on iPhone [medium] Workspace name is now case insensitive Lib updates","title":"v1.1.4"},{"location":"release-notes/apps/launcher/#v113","text":"[low] Automatic bug reporting endpoint changed","title":"v1.1.3"},{"location":"release-notes/apps/launcher/#v1106","text":"Internal refactoring [very high] Solved issues with new tenant creation on multitenancy environments","title":"v1.1.0.6"},{"location":"release-notes/apps/launcher/#v1105","text":"..","title":"v1.1.0.5"},{"location":"release-notes/apps/portal/","text":"v2.1.4 \u00b6 External library updates AppStore SDK update v2.1.3 \u00b6 [low] Automatic bug reporting endpoint changed v2.1.1 \u00b6 Library updates v2.1.0.8 \u00b6 ..","title":"Portal"},{"location":"release-notes/apps/portal/#v214","text":"External library updates AppStore SDK update","title":"v2.1.4"},{"location":"release-notes/apps/portal/#v213","text":"[low] Automatic bug reporting endpoint changed","title":"v2.1.3"},{"location":"release-notes/apps/portal/#v211","text":"Library updates","title":"v2.1.1"},{"location":"release-notes/apps/portal/#v2108","text":"..","title":"v2.1.0.8"},{"location":"release-notes/apps/template/","text":"v2.8.5 \u00b6 Option to toggle override reasons when swiping left AppStore SDK update v2.7.0 \u00b6 API description updates UI improvements Bugfixes v2.6.9 \u00b6 Bug-fixes and improvements: API updates Bugfixes [Very High] Template metadata & comment definitions wipe out v2.6.8 \u00b6 Bug-fixes and improvements: [Very High] Fixed issue with overriding template by importing. [Very high] Fixed bug that didn't allow to add instructions from Documentation app. [Very high] When draft is deactivated, the revision number is not changed anymore. [High] Enabling \"Flow can be assigned to user\" now is synced. [Medium] Improved diplay of internal documentation. [Medium] Improved display of the template list. Fixed template list layout. [low] Automatic bug reporting endpoint changed v2.6.7 \u00b6 Bug-fixes and improvements: [high] Fix overriding existing templates through template menu [medium] Fixed override notice for template import dialog v2.6.6 \u00b6 v2.6.5 \u00b6 v2.6.4 \u00b6 Bug-fixes and improvements: [very high] Backlog for synchronised template is visible during the approval process [very high] During template synchronisation process template data are not rewriten anymore [high] Flow metadata isn't lost in process of template import [high] Scan label control has Bar code selected as a default option [high] Templates are created from the forst attempt on newly created tenants [medium] Changes pf template name are immediately displayed in the template's taks view [medium] Users will be notified if two metadata fields has same names [medium] Users will be notified that items without DataID won't be updated via API Features: Possible to open incoming template confirmation window with backlog from notifications v2.6.1 \u00b6","title":"Template"},{"location":"release-notes/apps/template/#v285","text":"Option to toggle override reasons when swiping left AppStore SDK update","title":"v2.8.5"},{"location":"release-notes/apps/template/#v270","text":"API description updates UI improvements Bugfixes","title":"v2.7.0"},{"location":"release-notes/apps/template/#v269","text":"Bug-fixes and improvements: API updates Bugfixes [Very High] Template metadata & comment definitions wipe out","title":"v2.6.9"},{"location":"release-notes/apps/template/#v268","text":"Bug-fixes and improvements: [Very High] Fixed issue with overriding template by importing. [Very high] Fixed bug that didn't allow to add instructions from Documentation app. [Very high] When draft is deactivated, the revision number is not changed anymore. [High] Enabling \"Flow can be assigned to user\" now is synced. [Medium] Improved diplay of internal documentation. [Medium] Improved display of the template list. Fixed template list layout. [low] Automatic bug reporting endpoint changed","title":"v2.6.8"},{"location":"release-notes/apps/template/#v267","text":"Bug-fixes and improvements: [high] Fix overriding existing templates through template menu [medium] Fixed override notice for template import dialog","title":"v2.6.7"},{"location":"release-notes/apps/template/#v266","text":"","title":"v2.6.6"},{"location":"release-notes/apps/template/#v265","text":"","title":"v2.6.5"},{"location":"release-notes/apps/template/#v264","text":"Bug-fixes and improvements: [very high] Backlog for synchronised template is visible during the approval process [very high] During template synchronisation process template data are not rewriten anymore [high] Flow metadata isn't lost in process of template import [high] Scan label control has Bar code selected as a default option [high] Templates are created from the forst attempt on newly created tenants [medium] Changes pf template name are immediately displayed in the template's taks view [medium] Users will be notified if two metadata fields has same names [medium] Users will be notified that items without DataID won't be updated via API Features: Possible to open incoming template confirmation window with backlog from notifications","title":"v2.6.4"},{"location":"release-notes/apps/template/#v261","text":"","title":"v2.6.1"},{"location":"release-notes/apps/user-management/","text":"v2.1.19 \u00b6 Websocket improvements AppStore SDK update v2.1.18 \u00b6 API description update UI improvements Bugfixes v2.1.17 \u00b6 Bugs and Changes Tennant token in id Bugfix in organization UI [Very high] Fixed adding a new organisation fails bug [high] Fixed issue where user is unable to Request password reset [medium] Refactor Position Types and Position Teams page layout [medium] Change Edit and Delete button appearance in table of entities v2.1.16 \u00b6 Login screen UI fix for mobile Display ID in organization menu Lib updates v2.1.15 \u00b6 Bugs and Changes [Very high] Refactoring of Location UI: improved location creation interface and location edit possibilities. [Very high] Major imporovements of Location setup logic. [Very high] Fixed issue with defined metadata title field duplication in the value field. [Very high] Improved redirection for third party apps on multitenant environments. [low] Automatic bug reporting endpoint changed v2.1.13 \u00b6 [high] Updated locations API v2.1.12 \u00b6 Bugs and Changes [high] Added phone number validation in the user creation process [high] Fixed theme syncronisation between Central and Remote locations v2.1.11 \u00b6 [high] Improvements for virtual location","title":"User Management"},{"location":"release-notes/apps/user-management/#v2119","text":"Websocket improvements AppStore SDK update","title":"v2.1.19"},{"location":"release-notes/apps/user-management/#v2118","text":"API description update UI improvements Bugfixes","title":"v2.1.18"},{"location":"release-notes/apps/user-management/#v2117","text":"Bugs and Changes Tennant token in id Bugfix in organization UI [Very high] Fixed adding a new organisation fails bug [high] Fixed issue where user is unable to Request password reset [medium] Refactor Position Types and Position Teams page layout [medium] Change Edit and Delete button appearance in table of entities","title":"v2.1.17"},{"location":"release-notes/apps/user-management/#v2116","text":"Login screen UI fix for mobile Display ID in organization menu Lib updates","title":"v2.1.16"},{"location":"release-notes/apps/user-management/#v2115","text":"Bugs and Changes [Very high] Refactoring of Location UI: improved location creation interface and location edit possibilities. [Very high] Major imporovements of Location setup logic. [Very high] Fixed issue with defined metadata title field duplication in the value field. [Very high] Improved redirection for third party apps on multitenant environments. [low] Automatic bug reporting endpoint changed","title":"v2.1.15"},{"location":"release-notes/apps/user-management/#v2113","text":"[high] Updated locations API","title":"v2.1.13"},{"location":"release-notes/apps/user-management/#v2112","text":"Bugs and Changes [high] Added phone number validation in the user creation process [high] Fixed theme syncronisation between Central and Remote locations","title":"v2.1.12"},{"location":"release-notes/apps/user-management/#v2111","text":"[high] Improvements for virtual location","title":"v2.1.11"},{"location":"release-notes/services/api-gateway/","text":"v1.0.3 \u00b6 AppStore SDK update v1.0.2 \u00b6 [low] Automatic bug reporting endpoint changed v1.0.1 \u00b6 v1.0.0 \u00b6 First release with limited functionality","title":"API Gateway"},{"location":"release-notes/services/api-gateway/#v103","text":"AppStore SDK update","title":"v1.0.3"},{"location":"release-notes/services/api-gateway/#v102","text":"[low] Automatic bug reporting endpoint changed","title":"v1.0.2"},{"location":"release-notes/services/api-gateway/#v101","text":"","title":"v1.0.1"},{"location":"release-notes/services/api-gateway/#v100","text":"First release with limited functionality","title":"v1.0.0"},{"location":"release-notes/services/app-store/","text":"v1.1.0 \u00b6 Breaking DB changes Permission scope support App categories (is default, platform, .. app) v1.0.4 \u00b6 Introduction of technical name for registered apps v1.0.3 \u00b6 CORS whitelist of registered applications User management OAuth support v1.0.2 \u00b6 [medium] Do not check permissions for anonymous APIs [low] Automatic bug reporting endpoint changed v1.0.1 \u00b6 Basic app store implementation. SDK availavble at https://github.com/RemoteCloud/AppStore.SDK.Demo","title":"App Store"},{"location":"release-notes/services/app-store/#v110","text":"Breaking DB changes Permission scope support App categories (is default, platform, .. app)","title":"v1.1.0"},{"location":"release-notes/services/app-store/#v104","text":"Introduction of technical name for registered apps","title":"v1.0.4"},{"location":"release-notes/services/app-store/#v103","text":"CORS whitelist of registered applications User management OAuth support","title":"v1.0.3"},{"location":"release-notes/services/app-store/#v102","text":"[medium] Do not check permissions for anonymous APIs [low] Automatic bug reporting endpoint changed","title":"v1.0.2"},{"location":"release-notes/services/app-store/#v101","text":"Basic app store implementation. SDK availavble at https://github.com/RemoteCloud/AppStore.SDK.Demo","title":"v1.0.1"},{"location":"release-notes/services/data-register/","text":"v2.0.3 \u00b6 AppStore SDK update v2.0.3 \u00b6 [low] Automatic bug reporting endpoint changed v2.0.2 \u00b6 POST requests for items will override existing items if the key matches v2.0.1 \u00b6 CORS implementation to allow API access","title":"Data Register"},{"location":"release-notes/services/data-register/#v203","text":"AppStore SDK update","title":"v2.0.3"},{"location":"release-notes/services/data-register/#v203_1","text":"[low] Automatic bug reporting endpoint changed","title":"v2.0.3"},{"location":"release-notes/services/data-register/#v202","text":"POST requests for items will override existing items if the key matches","title":"v2.0.2"},{"location":"release-notes/services/data-register/#v201","text":"CORS implementation to allow API access","title":"v2.0.1"},{"location":"release-notes/services/monitoring/","text":"v1.0.3 \u00b6 Package updates v1.0.2 \u00b6 [low] Automatic bug reporting endpoint changed v1.0.1 \u00b6 v1.0.0.2 \u00b6 ..","title":"Monitoring"},{"location":"release-notes/services/monitoring/#v103","text":"Package updates","title":"v1.0.3"},{"location":"release-notes/services/monitoring/#v102","text":"[low] Automatic bug reporting endpoint changed","title":"v1.0.2"},{"location":"release-notes/services/monitoring/#v101","text":"","title":"v1.0.1"},{"location":"release-notes/services/monitoring/#v1002","text":"..","title":"v1.0.0.2"},{"location":"release-notes/services/notifications/","text":"v1.0.2 \u00b6 v1.0.1 \u00b6 ..","title":"Notifications"},{"location":"release-notes/services/notifications/#v102","text":"","title":"v1.0.2"},{"location":"release-notes/services/notifications/#v101","text":"..","title":"v1.0.1"},{"location":"release-notes/services/pdf-generator/","text":"v2.2.2 \u00b6 [low] Automatic bug reporting endpoint changed v2.2.1 \u00b6 Retry logic in case generation fails v2.2.0 \u00b6 Replaced PDF generation engine. Now using Chrome.","title":"PDF Generator"},{"location":"release-notes/services/pdf-generator/#v222","text":"[low] Automatic bug reporting endpoint changed","title":"v2.2.2"},{"location":"release-notes/services/pdf-generator/#v221","text":"Retry logic in case generation fails","title":"v2.2.1"},{"location":"release-notes/services/pdf-generator/#v220","text":"Replaced PDF generation engine. Now using Chrome.","title":"v2.2.0"},{"location":"release-notes/services/remote-execution/","text":"v2.1.4 \u00b6 [low] Automatic bug reporting endpoint changed v2.1.3 \u00b6 v2.1.2.1 \u00b6 ...","title":"Remote Execution"},{"location":"release-notes/services/remote-execution/#v214","text":"[low] Automatic bug reporting endpoint changed","title":"v2.1.4"},{"location":"release-notes/services/remote-execution/#v213","text":"","title":"v2.1.3"},{"location":"release-notes/services/remote-execution/#v2121","text":"...","title":"v2.1.2.1"},{"location":"release-notes/services/sync/","text":"v1.2.2 \u00b6 [low] Automatic bug reporting endpoint changed v1.2.1.0 \u00b6 ..","title":"Sync"},{"location":"release-notes/services/sync/#v122","text":"[low] Automatic bug reporting endpoint changed","title":"v1.2.2"},{"location":"release-notes/services/sync/#v1210","text":"..","title":"v1.2.1.0"}]}